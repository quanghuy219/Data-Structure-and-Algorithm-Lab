#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}

#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}

#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}





#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}






#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



NHẬP XUẤT TẬP TIN TEXT
với ngôn ngữ C
Tài liệu cập nhật ngày 20/01/2017
Biên soạn bởi: Nguyễn Trung Thành
https://www.facebook.com/abcxyztcit
“
Học từ cái đáy của thế giới đi lên là cách duy
nhất bạn trở thành master.
Nguyễn Trung Thành
”Mục lục
A.
Tổng quan về tập tin ................................................................................... 1
1. Tập tin (file) là gì ? Có ăn được không ?................................................... 1
2. Đường dẫn của file ................................................................................. 3
B.
Nhập xuất với tập tin text ........................................................................... 4
1. Vấn đề với nhập xuất cơ bản từ console/terminal ................................... 4
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ? ............................ 5
3. Thế thì nhập xuất file như thế nào ? ....................................................... 8
a) Công thức cơ bản ................................................................................ 8
b) Mở file ................................................................................................ 9
c) Xử lý đọc/ghi file ............................................................................... 11
d) Tổng kết nho nhỏ .............................................................................. 16
4.
Các vấn đề mở rộng ............................................................................. 17
a) Nhập chuỗi ....................................................................................... 17
b) Nhập số và chuỗi xen kẽ nhau............................................................ 20
c) Sự linh động của việc nhập dữ liệu ..................................................... 24
d) Nhập nhiều biến trên 1 dòng ............................................................. 25
C. Phụ lục tra cứu các hàm xử lý file .............................................................. 27
D. Các kiến thức nâng cao ............................................................................. 30
1. Đường dẫn tuyệt đối và đường dẫn tương đối ...................................... 30
2. File nhị phân là gì, có ăn được không ?.................................................. 32
3. File text (tập tin văn bản) là gì ? ............................................................ 32
E. Một số bài tập đơn giản nên rèn luyện ...................................................... 34
F. Tổng kết ................................................................................................... 36Trang 1
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
A. Tổng quan về tập tin
1. Tập tin (file) là gì ? Có ăn được không ?
Tập tin (trong tiếng Anh gọi là “file”) là một vật thể nào đó giúp ta lưu trữ dữ liệu.
Ví dụ: tập tin âm nhạc giúp ta lưu các bài hát, tập tin hình ảnh, tập tin doc/docx của Microsoft
Word, tập tin nén ZIP/RAR,...
Từ đó sinh ra 2 dạng chương trình như sau:
Quản lý
file
File
Mở và
xử lý file
 Các chương trình quản lý file: File Explorer (Windows Explorer), Total Commander,....
Chúng giúp ta xem danh sách tập tin/thư mục, mở tập tin/thư mục, đổi tên chúng, v.v
 Các chương trình mở file và xử lý file: tùy theo dạng file sẽ có các chương trình tương
ứng.
- File văn bản doc hoặc docx: chương trình Microsoft Word.
- File nén zip hoặc rar: chương trình WinRAR, WinZIP, 7zip, v.v
- File ảnh bmp, jpeg, png,...: chương trình Photos mặc định của Windows, chương trình
Photoshop, trình duyệt web cũng xem được file ảnh,...
- File văn bản thuần túy text có đuôi txt: chương trình Notepad, Vim,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 2
Tổng quan về tập tin
Tập tin (file) là gì ? Có ăn được không ?
Hình minh họa: chương trình File Explorer của hệ điều hành Windows.
Đi kèm với tập tin là khái niệm “thư mục”. Thư mục (tiếng Anh là “folder” hoặc “directory”) là
cái rổ để ta bỏ tập tin vào trong đó.
- Con cá (bên trong cái rổ) là file.
- Cái rổ là folder.
- Cái rổ có thể chứa bên trong những cái rổ khác.
Kết luận: file là 1 cái gì đó giúp ta lưu trữ dữ liệu, nó không ăn được nhưng nó rất ngon, rất
hữu ích vì ta sử dụng nó hàng ngày.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 3
Tổng quan về tập tin
Đường dẫn của file
2. Đường dẫn của file
Cũng giống như địa chỉ nhà vậy. Ví dụ địa chỉ nhà của ta là “200/4/19 đường ABC”. Khi ấy ta
hiểu rằng:
- Ở đường ABC có hẻm/ngách số 200.
- Trong hẻm số 200 có hẻm số 4.
- Trong hẻm số 4 có căn nhà số 19, đó là nhà của ta.
Đường dẫn của file cũng tương tự. Ví dụ ta có đường dẫn “D:\LapTrinh\BaiTap\Báo cáo.docx”.
- Trong ổ đĩa D có thư mục “LapTrinh”.
- Trong thư mục “LapTrinh” có thư mục “BaiTap”.
- Trong thư mục “BaiTap” chứa file “Báo cáo.docx”.
Đây chỉ là những kiến thức hết sức căn bản, chúng ta chuyển đến nội dung chính của bài học
^^.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 4
Nhập xuất với tập tin text
Vấn đề với nhập xuất cơ bản từ console/terminal
B. Nhập xuất với tập tin text
1. Vấn đề với nhập xuất cơ bản từ console/terminal
Xét một đoạn chương trình như sau với ngôn ngữ C.
#include <stdio.h>
int main()
{
float Toan, Ly, Hoa;
float dtb; // diem trung binh
printf("Nhap diem mon Toan = ");
printf("Nhap diem mon Ly
= ");
printf("Nhap diem mon Hoa = ");
scanf("%f", &Toan);
scanf("%f", &Ly);
scanf("%f", &Hoa);
dtb = (Toan + Ly + Hoa) / 3;
printf("Diem trung binh = %f", dtb);
return 0;
}
Một chương trình đơn giản, bạn nào đọc code cũng hiểu được. Chương trình sẽ nhập điểm
Toán, Lý, Hóa từ màn hình, sau đó xuất kết quả (điểm trung bình) ra màn hình. Các biến
(Toan, Ly, Hoa) mà bạn nhập đều được lưu trữ tạm thời trên bộ nhớ RAM. Sau khi tắt
chương trình, RAM được giải phóng, đồng nghĩa với việc các biến đều "bay theo mây khói".
Đây là cách cổ điển khi ta nhập và xuất thông tin từ màn hình. Cách này rất dễ dùng, nhanh
gọn lẹ.
Nhưng các này liệu có thật sự tốt trong mọi trường hợp ?
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 5
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
2. Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
a) Tình huống 1
Cũng gần giống như ví dụ trên, nhưng lần này ta nhập điểm cho 100 học sinh. Tìm điểm trung
bình cao nhất.
#include <stdio.h>
int main()
{
float Toan[100], Ly[100], Hoa[100], dtb[100];
float dtbmax = -1; // vi khong co diem < 0
int i;
for (i = 0; i < 100; i++)
{
printf("Nhap diem mon Toan \t(hoc sinh %d) = ", i);
scanf("%f", &Toan[i]);
printf("Nhap diem mon Ly \t(hoc sinh %d) = ", i);
scanf("%f", &Ly[i]);
printf("Nhap diem mon Hoa \t(hoc sinh %d) = ", i);
scanf("%f", &Hoa[i]);
dtb[i] = (Toan[i] + Ly[i] + Hoa[i]) / 3;
if (dtb[i] > dtbmax)
dtbmax = dtb[i];
}
printf("Diem trung binh cao nhat = %f", dtbmax);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 6
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Khi chạy chương trình, chắc chắn là bạn sẽ vất vả nhập điểm cho 100 học sinh rồi. Giả sử đến
lúc bạn nhập điểm Toán của học sinh 98...
Và bạn chợt phát hiện ra mình đã nhập sai điểm môn Toán !!! Thật là 3 chấm, thật là nổi điên.
Không còn cách nào khác bạn phải tắt chương trình và nhập lại từ đầu. Mọi công sức đều bị
tiêu tan trong phút chốc !
Phát điên
Tưởng tượng bạn download phim nặng về máy tính. Download đến 98% thì bị rớt mạng, hết
pin,...
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 7
Nhập xuất với tập tin text
Vì sao nhập xuất từ file thay vì nhập xuất từ console ?
Thật là đau khổ khi nhập xuất từ màn hình console. Bây giờ nếu nhập xuất với file thì sao ? Bạn
chỉ đơn giản mở 1 tập tin chứa điểm của các học sinh, tìm đến điểm môn Toán của học sinh 98
và sửa lại thôi. Thật đơn giản .
b) Tình huống 2
Giả sử bạn cần viết chương trình quản lý thư viện. Thư viện này chứa một lượng lớn thông tin
về độc giả, sách,... Hãy tưởng tượng khi bạn chạy chương trình, bạn cần nhập vào thông tin
100 cuốn sách, 50 độc giả. Sau khi tắt chương trình, toàn bộ thông tin mà bạn cực khổ nhập
đều... bay theo mây khói (như phần 1 đã trình bày). Lần sau chạy lại chương trình, bạn phải...
nhập lại từ đầu.
Việc lưu trữ thông tin nhập/xuất trên file sẽ giúp bạn lưu trữ thông tin dài lâu. Lưu được bao
lâu thì phải tùy thuộc vào việc... chừng nào ổ đĩa của bạn bị hư hỏng.
c) Tình huống 3, 4, 5,..., n
Còn nhiều tình huống khác mà bạn sẽ gặp. Không phải lúc nào cũng phải nhập xuất từ màn
hình console và cũng không phải lúc nào cũng nhập xuất từ file. Tùy vào tình huống mà bạn
quyết định cho tốt là được.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 8
Nhập xuất với tập tin text
3. Thế thì nhập xuất file như thế nào ?
Thế thì nhập xuất file như thế nào ?
a) Công thức cơ bản
Khi nhập xuất file, bạn phải tuân theo 3 bước như ở dưới.
Mở file
Xử lý file
Đóng file
Đây là câu thần chú không được phép quên.
Ví dụ:
- Mở nắp chai nước ra (mở file).
- Uống nước hoặc bỏ thêm nước vào (xử lý file).
- Đóng nắp chai lại (đóng file).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 9
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
b) Mở file
Công thức chung:
FILE *f = fopen(đường dẫn, chế độ);
Hoặc
FILE *f;
f = fopen(đường dẫn, chế độ);
Ta khai báo 1 biến có tên là “f” và biến này đại diện cho 1 file ta cần xử lý.
Ví dụ:
FILE *f = fopen("D:\input.txt", "rt");
o Chế độ “rt” là read text – đọc file văn bản.
o Biến f đại diện cho file “D:\input.txt”.
o Trong ổ đĩa D phải có file “input.txt”.
Hãy nhớ f đại diện cho file “input.txt”, ta muốn đọc nội dung từ “input.txt” tức là đọc từ biến f.
FILE *f = fopen("D:\input.txt", "rt");
FILE *g = fopen("D:\abc.txt", "rt");
Đọc biến x từ file “D:\input.txt”
fscanf(f, "%d", &x);
fscanf(g, "%d", &y);
Đọc biến y từ file “D:\abc.txt”
Việc mở file có thể gặp thất bại (vì các lý do như: đường dẫn không đúng, file không tồn tại, bị
1 chương trình nào đó “xí” trước,...). Vì vậy ta rất nên có thêm câu lệnh kiểm tra.
Sau khi mở file bằng lệnh fopen, nếu f bằng NULL tức là thất bại, nếu f khác NULL tức là thành
công.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 10
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Code minh họa việc đọc file input.txt:
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\input.txt", "rt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\input.txt");
return 1;
}
// các lệnh đọc file...
...
}
Nếu “rt” (read text) là đọc file văn bản thì ta cũng có “wt” (write text) là ghi file văn bản.
#include <stdio.h>
int main()
{
FILE *f = fopen("D:\output.txt", "wt");
if (f == NULL)
{
printf ("Khong mo duoc file D:\output.txt");
return 1;
}
// các lệnh ghi file...
...
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 11
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
c) Xử lý đọc/ghi file
Sau khi mở file thành công thì ta có thể xử lý file được rồi.
Ta nhớ lại, bình thường khi nhập dữ liệu ta thường sử dụng các lệnh như scanf, gets, getc.
Nhập dữ liệu từ file tương tự, ta chỉ cần thêm "f" vào: fscanf, fgets, fgetc.
Cũng thế ta có các lệnh fprintf, fputs, fputc.
Quá dễ đúng không nào ?
Tuy nhiên, ta thường hay chạm phải 3 lệnh này nhất: fscanf, fgets, fprintf. Các lệnh khác bạn
có thể quên đi.
Ví dụ: nhập 1 số nguyên x.
Nhập bình thường từ màn hình console/terminal:
int x;
scanf("%d", &x);
Nhập kiểu file:
int x;
FILE *fin = fopen("D:\input.txt", "rt");
fscanf(fin, "%d", &x);
Chỉ cần sửa lại như trên, dễ như chưa bao giờ dễ.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 12
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Ví dụ minh họa 1: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
màn hình.
Dòng ViDu01.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#include <stdio.h>
int main()
{
int x, y;
FILE *fin;
fin = fopen("input.txt", "rt");
if (fin == NULL)
{
printf("Khong mo duoc file input.txt");
return 1;
}
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
printf("Tong 2 so la: %d \n", x + y);
return 0;
}
Bạn dễ dàng nhận thấy quy trình 3 bước mà mình đã nói ở phần “Công thức cơ bản”:
- Bước 1: mở file (dòng code số 8).
- Bước 2: xử lý đọc file (dòng code số 15).
- Bước 3: đóng file (dòng code số 17).
Để ý ở dòng code số 8: ta không chỉ định đường dẫn file rõ ràng là “D:\input.txt” mà chỉ ghi tên
file “input.txt”. Lúc này ta tự hiểu rằng 99% file input.txt cùng thư mục với chương trình chạy
(cùng thư mục với file mã nguồn ViDu01.c). Bạn sẽ tìm hiểu sâu hơn vấn đề này ở cuối tài liệu.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 13
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Đây là nội dung file “input.txt”.
Chạy chương trình:
Kết quả hoàn toàn chính xác.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 14
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
Thêm 1 ví dụ nữa nhé. Hơn 1 chút xíu thôi.
Ví dụ minh họa 2: nhập 2 số x và y từ file “input.txt”, sau đó tính tổng 2 số và xuất kết quả ra
file “output.txt”.
Dòng ViDu02.c
1 #include <stdio.h>
2
3 int main()
4 {
5
int x, y;
6
FILE *fin;
7
FILE *fout;
8
9
fin = fopen("input.txt", "rt");
10
if (fin == NULL)
11
{
12
printf("Khong mo duoc file input.txt");
13
return 1;
14
}
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30 }
fscanf(fin, "%d %d", &x, &y);
fclose(fin);
fout = fopen("output.txt", "wt");
if (fout == NULL)
{
printf("Khong mo duoc file output.txt");
return 1;
}
fprintf(fout, "%d", x + y);
fclose(fout);
return 0;
Bạn có thể tự nhận diện ra quy trình 3 bước ở trong đoạn code trên ?
Từ dòng code 9 đến 17 là đọc nội dung x và y từ file “input.txt”. Từ dòng code 19 đến 27 là ghi
nội dung kết quả ra file “output.txt”.
Dễ dàng nhận thấy: khi đã mở file ở chế độ “rt” thì ta đọc file (fscanf), khi ta mở file ở chế độ
“wt” thì ta ghi file (fprintf). Không được lẫn lộn nhé !!! Mở file ở chế độ “rt” mà fprintf là chết
rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 15
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
File “input.txt” vẫn có nội dung là “5 -8” như ví dụ trước. Bây giờ ta chạy thử xem.
Ồ, kì lạ ghê, không có gì trên màn hình ? Tất nhiên rồi, bởi vì đoạn code ở trên không hề có
lệnh nào in ra màn hình mà chỉ có lệnh xuất kết quả ra file “output.txt” mà thôi.
Bây giờ ta mở file output.txt ra xem.
Kết quả hoàn toàn chính xác đúng không nào.
Bạn để ý rõ ràng là file input.txt, file output.txt cùng thư mục với file mã nguồn ViDu02.c nhé.
FILE *f = fopen("D:\hihi\input.txt");
Mở file input.txt trong thư mục “hihi” trong ổ đĩa D.
FILE *f = fopen("input.txt");
Mở file input.txt trong cùng thư mục với chương trình thực thi (file mã nguồn).
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 16
Nhập xuất với tập tin text
Thế thì nhập xuất file như thế nào ?
d) Tổng kết nho nhỏ
Nhập xuất file chỉ đơn giản có vậy thôi. Quá dễ đúng không nào ?
Có rất nhiều bạn quên đi bước đóng file. Nếu bạn quên thì đôi khi sẽ gây ra những hậu quả
nghiêm trọng. Tốt nhất là đừng quên .
Cũng giống như đã ăn bánh thì phải trả tiền. Ăn bánh xong mà không trả tiền thì chắc sẽ ăn
đấm rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 17
Nhập xuất với tập tin text
Các vấn đề mở rộng
4. Các vấn đề mở rộng
a) Nhập chuỗi
Nhập chuỗi cũng như nhập số nguyên vậy, rất đơn giản. Ta sử dụng lệnh fgets hoặc fscanf (với
định dạng “%s”) để nhập chuỗi.
Cú pháp:
fgets(tên chuỗi, độ dài tối đa, tên biến file)
Ví dụ:
FILE *f = fopen("input.txt", "rt");
char hoten[30];
Nên để độ dài tối đa giống nhau
fgets(hoten, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 18
Nhập xuất với tập tin text
Các vấn đề mở rộng
Rất là bình thường đúng không nào !!! Tuy nhiên ta sẽ gặp 1 vấn đề.
Giả sử file input.txt có nội dung là “LOVE”. Bạn nhập nội dung file input.txt vào chuỗi s.
char s[7] = "";
FILE *f = fopen("input.txt", "rt");
fgets(s, 7, f);
Có thể chuỗi s của bạn là như sau:
Kí tự
s[0] s[1] s[2] s[3] s[4] s[5] s[6]
L O V E Kí tự xuống dòng \0
\0
Với nội dung như trên, khi ta sử dụng hàm strlen(s) sẽ trả về độ dài là 5 thay vì 4. Bởi vì chuỗi s
thừa ra 1 kí tự xuống dòng (kí tự ‘\n’ có mã = 10). Điều này không tốt chút nào !!!
Giả sử ta cần nhập họ tên, email và điểm trung bình của học sinh sau đó xuất ra màn hình.
Nếu tình trạng thừa kí tự xuống dòng xảy ra thì kết quả như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nếu ta giải quyết được vấn đề này thì kết quả sẽ như sau:
Ho ten: Nguyen Trung Thanh
Email: thanh@mail.com
Diem trung binh: 9.200000
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 19
Nhập xuất với tập tin text
Các vấn đề mở rộng
Giải quyết rất dễ dàng, ta viết 1 hàm bỏ kí tự xuống dòng:
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
Ví dụ minh họa 3: nhập họ tên, email, điểm trung bình từ file “hocsinh.txt” và xuất kết quả ra
màn hình.
Dòng ViDu03.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
char hoten[30];
char email[50];
float dtb;
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fgets(hoten, 30, f);
fgets(email, 50, f);
fscanf(f, "%f", &dtb);
fclose(f);
31
32
33
34
35
36
37
38
39
XoaXuongDong(hoten);
XoaXuongDong(email);
printf("Ho ten: %s \n", hoten);
printf("Email: %s \n", email);
printf("Diem trung binh: %f \n", dtb);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 20
Nhập xuất với tập tin text
Các vấn đề mở rộng
b) Nhập số và chuỗi xen kẽ nhau
Thật ra nhập xuất file không hề đơn giản.
Sẽ có lúc bạn nhập nhiều biến: kiểu số, chuỗi, kí tự,... Và bạn bị "dính chưởng" vì giá trị của
biến không đúng. Mình sẽ không trình bày chi tiết vì lỗi này rất đa dạng.
Đây là vấn đề khá chuyên sâu liên quan buffer và stream. Ở mức độ mới học bạn chỉ cần biết
cách “phòng bệnh hơn chữa bệnh” là được ^^.
PHÒNG BỆNH NHƯ THẾ NÀO ?
Xét tình huống: Nhập nội dung file input.txt với cấu trúc như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dĩ nhiên, đoạn code của chúng ta sẽ như sau:
int NamSinh;
char HoTen[30];
FILE *f = fopen("input.txt", "rt");
// giả sử f != NULL
fscanf(f, "%d", &NamSinh);
fgets(HoTen, 30, f);
// in ra màn hình NamSinh và HoTen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 21
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy thử chương trình.
Ta nhận thấy năm sinh hiện ra đúng nhưng họ tên không hiện ra trên màn hình ??? Suy ra
HoTen là chuỗi rỗng  sai rồi.
Giải thích vì sao bị sai: sau khi thực hiện xong lệnh fscanf, con trỏ chưa xuống dòng (để chuẩn
bị đọc chuỗi họ tên ở dòng thứ 2).
Như vậy từ đây trở về sau, cứ xuống dòng thì thêm 1 khoảng trắng (hoặc thêm \n) vào trong
lệnh fscanf. Sửa lại đoạn code trên như sau:
Chú ý: có 1 khoảng
trắng đằng sau kí tự d.
fscanf(f, "%d ", &NamSinh);
fgets(HoTen, 30, f);
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 22
Nhập xuất với tập tin text
Các vấn đề mở rộng
Lấy 1 ví dụ khác: nhập nội dung file input.txt với cấu trúc:
-
-
-
-
Dòng đầu tiên: điểm 3 môn Toán, Lý, Hóa.
Dòng thứ 2: họ tên học sinh.
Dòng thứ 3: giới tính học sinh (0 = Nữ, 1 = Nam).
Dòng thứ 4: năm sinh.
Như vậy ta sẽ có các lệnh nhập dữ liệu từ file như sau :
Từ nay về sau bạn phải nhớ như 1 thói quen: có xuống dòng thì thêm 1
khoảng trắng vào cuối lệnh fscanf.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 23
Nhập xuất với tập tin text
Các vấn đề mở rộng
OK, tổng kết lại mọi thứ, ta có ví dụ minh họa 4: nhập thông tin học sinh từ file input.txt và
xuất ra màn hình. Cấu trúc file input.txt như sau:
- Dòng đầu tiên: năm sinh của học sinh.
- Dòng tiếp theo: họ tên học sinh.
Dòng ViDu04.c
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
#include <string.h>
void XoaXuongDong(char s[])
{
int n = strlen(s);
if (n > 0 && s[n-1] == '\n')
s[n-1] = '\0';
}
int main()
{
int NamSinh = 0;
char HoTen[30] = "";
FILE *f;
f = fopen("hocsinh.txt", "rt");
if (f == NULL)
{
printf("Khong mo duoc file hocsinh.txt");
return 1;
}
fscanf(f, "%d ", &NamSinh); // <---- chú ý
fgets(HoTen, 30, f);
fclose(f);
XoaXuongDong(HoTen);
printf("Ho ten: %s \n", HoTen);
printf("Nam sinh: %d \n", NamSinh);
return 0;
}
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 24
Nhập xuất với tập tin text
Các vấn đề mở rộng
c) Sự linh động của việc nhập dữ liệu
Mọi thứ đều có liên quan với nhau. Học 1 kiến thức mới bạn hãy cố gắng liên hệ kinh nghiệm
đã học để hiểu tốt hơn. Bạn đã quen rất nhiều với lệnh scanf thì khi chuyển sang fscanf cũng
không có gì khó cả.
Ví dụ c01: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ màn hình console/terminal.
- Cách 1: scanf("%d %d", &x, &y).
- Cách 2: scanf("%d", &x) sau đó là scanf("%d", &y).
Ví dụ c02: nhập tọa độ số nguyên (x, y) của 1 điểm A nào đó từ file.
Tự dưng bạn biết làm = 2 cách rồi nhé. Học mà cứ như không học, không được chỉ cho
học mà cũng tự biết cách làm, vậy mới hay.
Ví dụ c03: khoảng trắng trong lệnh scanf và fscanf có thể khớp với khoảng trắng thực tế, kí tự
tab thực tế hoặc kí tự xuống dòng thực tế.
Nghe có vẻ khó hiểu, hãy xem đây. Xét việc nhập tọa độ (x, y) từ file. Giả sử ta có 3 trường hợp
file input.txt như sau:
Trường hợp 1: ta có 2 số nguyên cách nhau bởi 1 khoảng trắng.
9 4
Trường hợp 2: ta có 2 số nguyên cách nhau bởi 1 kí tự tab.
9
4
Trường hợp 3: ta có 2 số nguyên cách nhau bởi kí tự xuống dòng.
9
4
Chỉ với 1 lệnh fscanf(f, "%d %d", &x, &y) ta chơi được cả 3 trường hợp luôn. Sướng !
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 25
Nhập xuất với tập tin text
Các vấn đề mở rộng
d) Nhập nhiều biến trên 1 dòng
Xét bài toán: nhập vào danh sách các học sinh, với quy ước như sau.
- Dòng đầu tiên: n là số lượng học sinh.
- n dòng tiếp theo, mỗi dòng chứa thông tin của 1 học sinh.
o Các thông tin theo thứ tự: năm sinh, điểm trung bình, họ tên.
Dòng ViDu05.c
11 int main()
12 {
13
int namSinh[20];
14
float dtb[20];
15
char hoTen[20][30];
16
int n = 0;
17
int i;
18
FILE *f;
19
20
f = fopen("lophoc.txt", "rt");
21
if (f == NULL) { ... }
...
27
fscanf(f, "%d ", &n);
28
29
for (i = 0; i < n; i++)
30
{
31
fscanf(f, "%d %f ", &namSinh[i], &dtb[i]);
32
fgets(hoTen[i], 30, f);
33
XoaXuongDong(hoTen[i]);
34
}
35
36
fclose(f);
37
38
for (i = 0; i < n; i++)
39
{
40
printf("\nHoc sinh %s \n", hoTen[i]);
41
printf("\tNam sinh: %d \n", namSinh[i]);
42
printf("\tDiem trung binh: %f \n", dtb[i]);
43
}
44
45
return 0;
46 }
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 26
Nhập xuất với tập tin text
Các vấn đề mở rộng
Chạy chương trình:
Nếu lỡ như thông tin mỗi học sinh theo thứ tự: họ tên trước sau đó là năm sinh, điểm trung
bình  đây là 1 sự khó khăn không nhỏ. Bạn không cần phải tự làm khó bản thân, bạn tự quy
ước cấu trúc của file sao cho thuận tiện, dễ dàng cho bạn xử lý là ok.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 27
Phụ lục tra cứu các hàm xử lý file
C. Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Ghi nhớ: các hàm xử lý file đều có trong thư viện stdio.h. Bạn cần include thư viện này nhé.
Hàm fopen
- Cú pháp: fopen(đường dẫn file, chế độ mở file).
- Hàm fopen trả về NULL nếu mở file thất bại, khác NULL tức là thành công.
- Có nhiều chế độ mở file:
o “rt” (read text): đọc file văn bản.
o “wt” (write text): ghi file văn bản.
o “at” (append text): mở file văn bản để ghi dữ liệu vào cuối file.
 Ví dụ: file “hocsinh.txt” đã có sẵn thông tin của 2 học sinh. Bây giờ bạn
muốn bổ sung thêm 1 học sinh vào cuối file thì chỉ cần
fopen(“hocsinh.txt”, “at”)
Sau đó bạn dùng lệnh fprintf để ghi dữ liệu vào, vậy là xong ^^.
 Tư duy mở rộng: nếu lỡ không biết chế độ “at” thì sao ? Ta phải đọc toàn
bộ danh sách học sinh vào mảng, sau đó thêm 1 phần tử vào mảng, sau đó
ghi toàn bộ mảng thông tin vào file lại. Khá bất tiện.
o “r” hoặc “rb”: chế độ cao cấp, tự tìm hiểu.
o “w” hoặc “wb”: chế độ cao cấp, tự tìm hiểu.
o “a” hoặc “ab”: chế độ cao cấp, tự tìm hiểu.
o Và một số chế độ khác.
Hàm fprintf và fscanf không còn gì để nói.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 28
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Hàm fgets
- Cú pháp: fgets(tên biến chuỗi, số lượng kí tự cần đọc, tên biến file).
- Hàm fgets trả về con trỏ (biến chuỗi đã truyền vào) nếu đọc thành công. Nếu đọc không
thành công sẽ trả về NULL.
Hàm feof
- Cú pháp: feof(tên biến file).
- Hàm feof trả về giá trị = 0 khi chưa đọc hết file, trả về giá trị khác 0 khi đã đọc hết file.
- Ý nghĩa: hàm này rất hữu ích cho vấn đề “đọc file không biết bao giờ mới hết file”.
Xét bài toán: cho file input.txt có cấu trúc như sau:
- Dòng đầu tiên là n: số lượng phần tử của mảng.
- n dòng tiếp theo, mỗi dòng là 1 số nguyên.
Dễ dàng nhận thấy, ban đầu ta fscanf(f, "%d ", &n),
sau đó ta for (i = 0; i < n; i++) để đọc dữ liệu vào mảng là xong.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 29
Phụ lục tra cứu các hàm xử lý file
Các vấn đề mở rộng
Xét bài toán khó hơn: cho file input.txt có nội dung là các số nguyên, mỗi dòng là 1 số nguyên.
Ta cần đọc các số nguyên này vào mảng và xuất mảng ra màn hình.
- Ta không biết n cụ thể là bao nhiêu.
- Không biết bao giờ mới đọc hết file ?
Ví dụ minh họa 6 giải quyết bài toán trên, sử dụng hàm feof.
Dòng ViDu06.c
3
4
5
6
7
8
9
10
11
...
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
int main()
{
int a[50];
int n = 0;
int i;
FILE *f;
f = fopen("array.txt", "rt");
if (f == NULL) { ... }
n = 0;
// hoac while (feof(f) == 0)
while ( ! feof(f) )
{
fscanf(f, "%d ", &a[n]);
n++;
}
fclose(f);
for (i = 0; i < n; i++)
printf("%5d", a[i]);
return 0;
}
Giải thích đoạn code trên: trong khi chưa hết file ( while (! feof(f) ) thì ta đọc số nguyên
(fscanf).
Thật ra ở đoạn code ví dụ 6 ở trên vẫn còn 0.1% chưa xử lý tốt. Tuy nhiên bạn chỉ cần hiểu,
nắm rõ là ok rồi.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 30
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
D. Các kiến thức nâng cao
Không nhất thiết phải học, nhưng nên đọc để mở rộng tầm nhìn.
1. Đường dẫn tuyệt đối và đường dẫn tương đối
Khi học đến phần “Mở file” bạn làm quen với hàm fopen.
Trong hàm fopen, ban đầu mình truyền vào fopen("D:\input.txt"), nhưng về sau mình
sửa lại thành fopen("input.txt").
Giả sử bạn có nhu cầu ngắm gái xinh ở phòng F301 trường Đại học Khoa học Tự nhiên TP. HCM
(ĐH KHTN).
- Trường hợp 1: nếu hiện tại bạn không ở trong trường ĐH KHTN, bạn phải nói rõ “tao
đến phòng F301 trường ĐH KHTN để ngắm gái”.
- Trường hợp 2: nếu hiện tại bạn đang ở trong trường ĐH KHTN, bạn chỉ cần nói “tao đến
phòng F301 để ngắm gái”.
Với trường hợp 1 tức là bạn đang nói cụ thể, rõ ràng một cách tuyệt đối.
Với trường hợp 2: tùy vào hoàn cảnh mà bạn diễn đạt một cách linh động. Nếu bạn đang ở
trường ĐH KHTN thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH KHTN”, nếu bạn đang ở trường
ĐH Bách Khoa Hà Nội thì bạn sẽ ngắm gái ở “phòng F301 trường ĐH Bách Khoa Hà Nội”.
Trường hợp 2 này gọi là “tương đối”, sự việc xảy ra tùy vào trạng thái hoàn cảnh hiện tại.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 31
Các kiến thức nâng cao
Đường dẫn tuyệt đối và đường dẫn tương đối
 fopen("D:\abc\input.txt") là ta đang truyền vào 1 đường dẫn tuyệt đối (đường
dẫn cố định), chắc như đinh đóng cột, bất di bất dịch. Bắt buộc file input.txt phải có
trong thư mục abc trong ổ đĩa D. Giả sử chương trình bạn chạy ở 1 máy tính khác thì
máy tính này cũng phải có ổ đĩa D, cũng phải có thư mục abc, cũng phải có file input.txt
trong thư mục abc. Rất là cứng ngắc.
 fopen("input.txt") là ta truyền vào 1 đường dẫn tương đối. Tùy vào đường dẫn
làm việc (hoàn cảnh hiện tại) mà sẽ xác định rõ file input.txt nằm ở đâu. Thông thường
đường dẫn làm việc sẽ trùng với thư mục chương trình thực thi EXE.
Ví dụ: đường dẫn làm việc là “E:\data\”, như vậy suy ra đường dẫn file input.txt đầy đủ
là “E:\data\input.txt”.
Đường dẫn làm việc thường là đường dẫn thư mục chứa chương trình.
 Trong thực tế, ta thường sử dụng đường dẫn tương đối cho linh động. File chương trình
của ta ở đâu thì các file input, output sẽ ở đó luôn.
Với các IDE thông dụng như Microsoft Visual Studio (Visual C++), CodeBlocks, NetBeans,... thì
đường dẫn làm việc là thư mục project. Do đó bạn cứ để các file input, output, file mã nguồn
vào cùng thư mục project là ok hết.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 32
Các kiến thức nâng cao
2. File nhị phân là gì, có ăn được không ?
File nhị phân là gì, có ăn được không ?
Đi sâu hơn, ta có thể nhìn file ở 1 góc độ khác. Lúc này file là một dãy các byte. Mỗi byte dữ
liệu nằm trong đoạn [0, 255].
Ví dụ: xét 1 file văn bản thuần túy có nội dung là “ABC”. Ta biết rằng kí tự ‘A’ có mã là 65, kí tự
‘B’ có mã là 66 và kí tự ‘C’ có mã là 67.
Ở góc độ của file nhị phân thì file của chúng ta sẽ có 3 bytes dữ liệu. Giá trị các byte lần lượt là
65, 66, 67. Rất đơn giản.
Nhờ vào góc nhìn như thế, ta có thêm nhiều kĩ thuật xử lý file tốt hơn, pro hơn, hay hơn. Ví dụ
ta quy định 30 bytes đầu tiên là họ tên, 4 bytes tiếp theo là điểm trung bình. Ta đọc 1 phát là
xong hết tất cả thông tin (không cần phải fgets rồi lại fscanf, không cần lo đọc đúng vị trí hay
không,...). Quá lợi hại.
3. File text (tập tin văn bản) là gì ?
Nói ra câu này mới gây sốc đây: file text là file nhị phân, hết.
Cụ thể hơn, file text ANSI là 1 trường hợp đặc biệt của file nhị phân khi ta quy ước 1 byte là 1
kí tự.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 33
Các kiến thức nâng cao
File text (tập tin văn bản) là gì ?
Ví dụ cụ thể:
- Ta có các file ảnh như jpeg, png, bmp,... Xét file
bitmap có đuôi bmp.
- Trong file bitmap quy định 54 bytes đầu tiên lưu
thông tin hình ảnh, ví dụ như chiều ngang, chiều
dọc, chế độ nén, số lượng màu,...
- Tưởng tượng bạn đọc thông tin của file ảnh dưới
góc độ file text
o Bạn phải fscanf từng thông tin, đôi khi sai 1
cái là đi hết.
o Giả sử thông tin chiều ngang trước rồi mới
đến thông tin chiều dọc. Bạn chỉ muốn lấy chiều dọc cũng không được, bạn phải
fscanf chiều ngang trước.
- Tưởng tượng bạn đọc thông tin của file ảnh dưới góc độ file nhị phân
o Chỉ cần 1 lệnh duy nhất là bạn đọc được trọn vẹn toàn bộ thông tin, chính xác và
hiệu quả.
o Bạn có thể lấy bất kì thông tin nào 1 cách dễ dàng, không cần phải fscanf tuần tự.
Nhờ vào xem xét ở góc độ các byte nên các thông tin được quy định ở các vị trí
cố định, chỉ cần bạn nhảy đến vị trí đó rồi đọc thông tin. Dễ quá dễ.
Trong hầu hết các vấn đề xử lý sâu bên dưới, ta đều làm việc với file nhị phân chứ không
phải file text. Đa số những gì bạn có trên máy tính đều là file nhị phân: file DOC/DOCX cũng là
file nhị phân; file ảnh BMP, PNG, JPEG,...; file nhạc MP3, FLAC, WAV,...; file chương trình EXE;
file tài liệu ebook như PDF, djvu,...; file nén ZIP, RAR, 7z,...; file jav như MP4, FLV, AVI....
Điều này đủ để nói lên được tầm quan trọng của file nhị phân. Tuy nhiên mình thấy hầu hết
các bạn chỉ dừng lại ở file text thuần túy. Khi học lên cao, bạn nên tìm hiểu file nhị phân, chúng
rất hay và thật sự hữu ích.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 34
Một số bài tập đơn giản nên rèn luyện
E. Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 1. Nhập mảng 1 chiều từ tập tin, sau đó hiển thị mảng này ra màn hình.
Cấu trúc của tập tin input như sau:
- Dòng đầu tiên là n = số lượng phần tử.
- Dòng thứ 2: gồm n số nguyên, cách nhau bởi 1 khoảng trắng.
Bài 2. Nhập h là chiều cao của tam giác từ bàn phím. Hãy xuất tam giác này ra tập tin
“tamgiac.txt”.
Tam giác có chiều cao h như hình dưới (giả sử h = 5).
*
* *
* * *
* * * *
*
*
*
*
*
Bài 3. Chúng ta thường xuyên copy tập tin từ nơi này qua nơi khác. Bạn hãy viết 1 chương
trình đơn giản giúp người dùng copy tập tin văn bản từ đường dẫn A sang đường dẫn B.
Giả sử mỗi dòng của tập tin văn bản chứa tối đa 1024 kí tự.
Ví dụ:
- Ban đầu người dùng nhập vào đường dẫn tập tin cần copy là “D:\HocTap\BaiLam.pdf”.
- Sau đó người dùng nhập vào đường dẫn cần copy đến “E:\BiMat\BaiLam.pdf”.
- Sau đó chương trình sẽ copy và thông báo “copy hoàn tất”.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 35
Một số bài tập đơn giản nên rèn luyện
File text (tập tin văn bản) là gì ?
Bài 4. Cho nội dung tập tin “input.txt” như sau
3
Microsoft
118000
Apple
80000
Google
53600
Thông tin của 1 công ty bao gồm: tên công ty và số lượng nhân viên.
Tập tin “input.txt” có cấu trúc như sau:
- Dòng đầu tiên là n = số lượng công ty.
- 2n dòng tiếp theo cho biết thông tin tên công ty và số lượng nhân viên công ty đó.
Theo ví dụ trên, công ty Microsoft có 118000 nhân viên, công ty Apple có 80000 nhân viên và
công ty Google có 53600 nhân viên.
Viết chương trình đọc file ở trên, xuất thông tin các công ty ra màn hình.
Bài 5. Nghệ thuật sử dụng các kí tự để xây dựng
nên hình ảnh gọi là ASCII art (hoặc text art, ascii
text,...).
Bạn hãy tìm hiểu và ứng dụng nó để in ra một
hình ảnh ASCII art ra màn hình console. Lưu ý: vì
font chữ console có giới hạn sẽ có một số kí tự
không in ra được.
Hình bên cạnh là ViDu07 đi kèm tài liệu này. Bạn
hãy chạy thử code và trải nghiệm nhé.
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 36
Tổng kết
File text (tập tin văn bản) là gì ?
F. Tổng kết
Các kiến thức bạn phải nhớ không được quên:
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcitTrang 37
Tổng kết
File text (tập tin văn bản) là gì ?
Tài liệu này lần đầu tiên được mình viết vào thời sinh viên năm 1 cho các bạn cùng lớp. Sau
này mình đào tạo lập trình, đến thời sinh viên năm 4 mình mới viết lại nhiều phiên bản hơn để
hoàn thiện hơn.
Hi vọng tài liệu này sẽ giúp ích cho bạn. Cảm ơn bạn đã xem.
Giới thiệu về bản thân: mình là sinh viên năm 4, admin group “Lập trình C/C++” với số lượng
thành viên top Việt Nam. Mình không thích chạy theo đời đại quá nhiều (như web, mobile), chỉ
thích những điều cốt lõi thuần túy trong ngành CNTT và trong cuộc sống. Mình thích học nhiều
thứ trên đời, thích đi đây đi đó không ngồi 1 chỗ code.
Mình cũng là 1 chuyên gia đào tạo lập trình, mentor hướng dẫn cho nhiều bạn học trò, sinh
viên. Mình tự hào vì có những bạn học trò giỏi ra được nhiều sản phẩm hay.
Tài liệu này nằm trong khóa học “Nhập môn lập trình với ngôn ngữ C” của mình, là tài liệu nội
bộ. Bạn có thể tham khảo thêm tại đây:
https://sites.google.com/site/tcitgioithieukhoahoc
Đừng học với mình vì bạn sẽ phải rất khổ sở rèn luyện, trải nghiệm cảm giác thi rớt để làm ra sản phẩm
Tác giả: Nguyễn Trung Thành
Facebook: https://www.facebook.com/abcxyztcit
Nếu bạn muốn kết bạn với mình, mình sẽ rất vui khi bạn nhắn 1 tin nhắn làm quen
Nhập xuất file text
Nguyễn Trung Thành - https://www.facebook.com/abcxyztcit
#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}


#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}



#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}




#include <stdio.h>
#include <time.h>

#define MAX 100


void copyCharacter(FILE* fin, FILE* fout){
  char c;
  while (  (c=fgetc(fin)) != EOF) {
    fputc(c,fout);
  }
}


void copyLine(FILE* fin, FILE* fout){
  char buff[MAX];
  
  while ( fgets(buff,MAX,fin) != NULL) {
    fputs(buff,fout);
  }
}


void copyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Syntax!!!\n");
    break;
  }
  return 0;
}









pyBlock(FILE* fin, FILE* fout){
  int size;
  char buff[MAX];
  printf("Enter size of block: ");
  scanf("%d",&size);
  while (!feof(fin)) {
    fread(buff,sizeof(char),size,fin);
    buff[size * sizeof(char)] = '\0';
    fwrite(buff,sizeof(char),size,fout);
  }
}


int main()
{
  FILE* fp1, *fp2;
  int choice;
  clock_t start,end;
  double time;

  printf("1. Copy character\n");
  printf("2. Copy lines\n");
  printf("3. Copy block\n");
  scanf("%d",&choice);
  switch (choice) {
  case 1: {
    start = clock();
    copyCharacter(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }

  case 2: {
     start = clock();
    copyLine(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  case 3: {
     start = clock();
    copyBlock(fp1,fp2);
    end = clock();
    time = ( (double)(end - start) )/CLOCKS_PER_SEC;
    break;
  }
  default: printf("Wrong Sy